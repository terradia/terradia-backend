import UserModel from "../../database/models/user.model";
import { UserInputError } from "apollo-server-express";
import { generateAuthlink } from "../../auth";
import jwt from "jsonwebtoken";
import { AuthenticationError, UserInputError } from 'apollo-server';
const createToken = async (user, secret, expiresIn) => {
  const { id, email, username, role } = user;
  return await jwt.sign({ id, email, username, role }, secret, {
    expiresIn,
  });
};

const EXPIREIN = '3000m'
export default {
  Query: {
    getUser: async (_parent, _args, { user }) => {
      if (!user) {
        return null;
      }
      // TODO : Analytics
      return user;
    }
  },
  Mutation: {
    login: async (_parent, {email, password}, {models, secret}, _info) => {
      let user = await models.models.UserModel.findByLogin(email);
      if (!user) {
        throw new UserInputError(
            'No user found with this login credentials.',
        );
      }
      const isValid = await models.models.UserModel.comparePasswords(password, user.password);

      if (!isValid) {
        throw new AuthenticationError('Invalid password.');
      }
      return {token: createToken(user, secret, EXPIREIN), userId: user.id};
    },
    register: async (_parent, {email, ...userInformations}, {secret}) => {
      const emailAlreadyTaken = await UserModel.findOne({
        where: {email}
      });
      if (emailAlreadyTaken) {
        throw new UserInputError(
            "Il semblerais qu'il existe déjà un utilisateur avec cet email."
        );
      }
      const user = await UserModel.create({...userInformations, email});

      // TODO : send the generated url to the user via email.
      // this is the link generated by jwt to validate the user. Give it to the user by email to validate his account.
      const validationLink = generateAuthlink("check-email", {
        id: user.id
      });
      console.log(validationLink);
      // TODO : here handle the identification of the user for the analytics.
      return {
        token: createToken(user, secret, "365 days"),
        userId: user.id,
        message: `Un email de confirmation a été envoyé a cette adresse email : ${user.email}, clique sur le lien dans le mail afin valider ton compte !`
      };
    }
  }
};
