import UserModel from "../../database/models/user.model";
import { generateAuthlink } from "../../auth";
import jwt from "jsonwebtoken";
import { AuthenticationError, UserInputError } from "apollo-server";
import { ApolloError } from "apollo-server-errors";
const fetch = require('node-fetch');
import userController from '../../controllers/user';

const createToken = async (user: UserModel, secret: string) => {
  const payload: Partial<UserModel> = user.toJSON();
  delete payload.password;
  return jwt.sign(payload, secret);
};

export default {
  Query: {
    getUser: async (_: any, __: any, { user }: { user: UserModel }) => {
      if (!user) {
        return null;
      }
      // TODO : Analytics
      return user;
    },
    doesFacebookAccountExistWithEmail: async (_: any, { facebookToken }: {facebookToken: string}, { user }: {user: UserModel}) => {
      let data = await fetch(`https://graph.facebook.com/me?fields=id,name,email&access_token=${facebookToken}`);
      data = await data.json();
      if (data.error)
        throw new ApolloError("Facebook account not found");
      let userFound = await UserModel.findAll({where: {email: data.email}});
      return userFound.length > 0
    },
  },
  Mutation: {
    login: async (
      _: any,
      { email, password }: { email: string; password: string },
      { secret }: { secret: string }
    ) => {
      let user = await UserModel.findByLogin(email);
      if (!user) {
        throw new UserInputError("No user found with this login credentials.");
      }
      const isValid = await UserModel.comparePasswords(password, user.password);

      if (!isValid) {
        throw new AuthenticationError("Invalid password.");
      }
      return { token: createToken(user, secret), userId: user.id };
    },
    register: async (
      _: any,
      {
        email,
        defineUserAsCostumer,
        ...userInformations,
      }: {
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        phone: string;
        defineUserAsCostumer: boolean;
      },
      { secret }: { secret: string }
    ) => {
      const emailAlreadyTaken = await UserModel.findOne({
        where: { email }
      });
      if (emailAlreadyTaken) {
        throw new ApolloError(
          "Il semblerais qu'il existe déjà un utilisateur avec cet email.",
          "403"
        );
      }
      const user = await UserModel.create({ ...userInformations, email });

      // TODO : send the generated url to the user via email.
      // this is the link generated by jwt to validate the user. Give it to the user by email to validate his account.
      const validationLink = generateAuthlink("check-email", {
        id: user.id
      });
      if (defineUserAsCostumer) {
        await userController.defineUserAsCustomer(user.id);
      }
      console.log(validationLink);
      // TODO : here handle the identification of the user for the analytics.
      return {
        token: createToken(user, secret),
        userId: user.id,
        message: `Un email de confirmation a été envoyé a cette adresse email : ${user.email}, clique sur le lien dans le mail afin valider ton compte !`
      };
    },
    signUpWithFacebook: async (_: any,
                               { facebookToken, exponentPushToken, defineUserAsCostumer }:
                                 { facebookToken: string, exponentPushToken: string, defineUserAsCostumer: boolean}, { secret }: {secret: string}) => {
      let data = await fetch(`https://graph.facebook.com/me?fields=id,name,email&access_token=${facebookToken}`);
      data = await data.json();
      if (data.error)
        throw new ApolloError("Facebook account not found");
      const [user] = await UserModel.findOrCreate({
        where: { email: data.email },
        defaults: {
          email: data.email,
          facebookId: data.id,
          exponentPushToken,
          phone: "070787866"
        }
      });
      if (defineUserAsCostumer) {
        await userController.defineUserAsCustomer(user.id);
      }
      return {
        token: createToken(user, secret),
        userId: user.id,
        message: `Un email de confirmation a été envoyé a cette adresse email : ${user.email}, clique sur le lien dans le mail afin valider ton compte !`
      };
    },
    signInWithFacebook: async (_: any,
                               { facebookToken, exponentPushToken }:
                                 { facebookToken: string, exponentPushToken: string},
                               { secret }: {secret: string}) => {
      let data = await fetch(`https://graph.facebook.com/me?fields=id,name,email&access_token=${facebookToken}`);
      data = await data.json();
      const user = await UserModel.findOne({
        where: { email: data.email }
      });
      if (!user) {
        throw new UserInputError("No user found with this login credentials.");
      }
      if (user.facebookId && data.id !== user.facebookId)
        throw new ApolloError("Account doesnt match");
      await UserModel.update(
        { facebookId: data.id, exponentPushToken },
        { where: { id: user.id } }
      );
      return { token: createToken(user, secret), userId: user.id };
    },
  }
};
